{"version":3,"sources":["images/starlink_logo.svg","images/satellite.svg","components/ObserverInfo.js","components/SatelliteList.js","components/WorldMap.js","constants.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ObserverInfo","props","tailLayout","wrapperCol","offset","span","className","level","labelCol","initialValues","longitude","latitude","altitude","radius","onFinish","observerInfo","findSatellitesOnClick","Item","label","name","rules","required","message","min","max","style","width","disabled","type","htmlType","loading","SatelliteList","satList","updateSatelliteList","length","itemLayout","dataSource","renderItem","item","actions","onChange","e","checked","targetSatllite","nextSatlliteList","map","satllite","satid","selected","onSelectionChange","target","Meta","avatar","src","satelliteImage","size","alt","title","satname","description","launchDate","POSITION_API_BASE_URL","progressStatus","WorldMap","selectedSatellites","onTracking","useState","duration","setDuration","progressPercentage","setProgressPercentage","progressText","setProgressText","undefined","timerId","setTimerId","markersInfo","setMarkersInfo","currentTimestamp","setCurrentTimestamp","updateMarker","data","index","sat","lon","positions","satlongitude","lat","satlatitude","info","onClick","Promise","all","id","fetch","then","response","json","fetchPositions","end","Date","timestamp","toString","setInterval","clearInterval","startTracking","catch","marginLeft","marginRight","defaultValue","value","percent","format","textAlign","projectionConfig","scale","height","stroke","strokeWidth","geography","geographies","geo","key","rsmKey","fill","mark","coordinates","r","ABOVE_API_BASE_URL","Main","setLoading","setSatList","trakcing","setTracking","setObserverInfo","nextObserverInfo","above","satellite","filter","Header","Layout","Footer","Content","App","starlinkLogo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"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","file":"static/js/main.0f170dfc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/starlink_logo.28756d25.svg\";","module.exports = __webpack_public_path__ + \"static/media/satellite.141ccf71.svg\";","import Title from \"antd/lib/typography/Title\";\nimport React from \"react\";\nimport { InputNumber, Form, Button } from \"antd\";\n\nconst ObserverInfo = (props) => {\n  const onFormFinish = (observerInfo) => {\n    props.findSatellitesOnClick(observerInfo);\n  }\n\n  const layout = {\n    labelCol: { span: 8 },\n    wrapperCol: { span: 24 },\n  };\n\n  const tailLayout = {\n    wrapperCol: { offset: 8, span: 16 },\n  };\n\n  return (\n    <div className=\"observer-info-container\">\n      <Title level={5}>Observer Info</Title>\n      <Form\n        {...layout}\n        initialValues={{ \n          longitude: \"0\",\n          latitude: \"0\",\n          altitude: \"0\",\n          radius: \"0\",\n        }}\n        onFinish={onFormFinish}\n      >\n        <Form.Item\n          label=\"Longitude\"\n          name=\"longitude\"\n          rules={[{ \n            required: true,\n            message: 'Please enter a valid longitude!',\n          }]}\n        >\n          <InputNumber min={-180} max={180} style={{ width: \"40%\" }} disabled={props.disabled} />\n        </Form.Item>\n\n        <Form.Item\n          label=\"Latitude\"\n          name=\"latitude\"\n          rules={[{ \n            required: true,\n            message: 'Please enter a valid latitude!',\n          }]}\n        >\n          <InputNumber min={-90} max={90} style={{ width: \"40%\" }} disabled={props.disabled} />\n        </Form.Item>\n\n        <Form.Item\n          label=\"Altitude(meters)\"\n          name=\"altitude\"\n          rules={[{ \n            required: true,\n            message: 'Please enter a valid altitude!',\n          }]}\n        >\n          <InputNumber min={-413} max={8850} style={{ width: \"40%\" }} disabled={props.disabled} />\n        </Form.Item>\n\n        <Form.Item\n          label=\"Radius\"\n          name=\"radius\"\n          rules={[{ \n            required: true,\n            message: 'Please enter a valid radius!',\n          }]}\n        >\n          <InputNumber min={0} max={90} style={{ width: \"40%\" }} disabled={props.disabled} />\n        </Form.Item>\n\n        <Form.Item {...tailLayout}>\n          <Button type=\"primary\" htmlType=\"submit\" disabled={props.loading || props.disabled}>\n            Find nearby satellites\n          </Button>\n        </Form.Item>\n      </Form>\n    </div>\n  )\n}\n\nexport default ObserverInfo;\n","import React from \"react\";\nimport Title from \"antd/lib/typography/Title\";\nimport { List, Checkbox, Avatar } from \"antd\";\nimport satelliteImage from '../images/satellite.svg';\n\nconst SatelliteList = ({\n  satList,\n  updateSatelliteList,\n  loading,\n  disabled\n}) => {\n  const onSelectionChange = (checked, targetSatllite) => {\n    const nextSatlliteList = satList.map((satllite) => {\n      if (satllite.satid === targetSatllite.satid) {\n        return {\n          ...satllite,\n          selected: checked\n        }\n      }\n      else {\n        return {\n          ...satllite\n        }\n      }\n    });\n\n    updateSatelliteList(nextSatlliteList);\n  }\n\n  return (\n    <div className=\"satellite-list-container\">\n      <Title level={5}>Nearby Satellites ({satList? satList.length : 0})</Title>\n      <p>Select the satellites you wanna track on the world map at the right side</p>\n      <hr/>\n      <List \n        className=\"sat-list\"\n        itemLayout=\"horizontal\"\n        dataSource={satList}\n        loading={loading}\n        renderItem={ item => (\n            <List.Item \n              actions={[<Checkbox onChange={(e) => onSelectionChange(e.target.checked, item)} checked={item.selected} disabled={disabled} />]}>\n                <List.Item.Meta\n                  avatar={<Avatar src={satelliteImage} size=\"large\" alt=\"satellite\"/>}\n                  title={<p>{item.satname}</p>}\n                  description={`Launch Date: ${item.launchDate}`}\n                />\n            </List.Item>\n        )}\n      />\n    </div>\n  )\n}\n\nexport default SatelliteList;\n","import React, { useState } from \"react\";\nimport {\n  Geographies,\n  Geography,\n  Graticule,\n  Sphere,\n  ComposableMap,\n  Marker\n} from \"react-simple-maps\";\nimport { Button, InputNumber, Progress } from \"antd\";\nimport { NY20_API_KEY, NY20_BASE_URL } from \"../constants\";\n\nexport const POSITION_API_BASE_URL = `${NY20_BASE_URL}/positions`;\n\nconst progressStatus = {\n  Idle: 'Idle',\n  Tracking: 'Tracking...',\n  Complete: 'Complete'\n}\n\nconst geoUrl =\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nconst WorldMap = ({\n  selectedSatellites,\n  disabled,\n  onTracking,\n  observerInfo\n}) => {\n  const [duration, setDuration] = useState(1);\n  const [progressPercentage, setProgressPercentage] = useState(0);\n  const [progressText, setProgressText] = useState(progressStatus.Idle);\n  const [timerId, setTimerId] = useState(undefined);\n  const [markersInfo, setMarkersInfo] = useState([]);\n  const [currentTimestamp, setCurrentTimestamp] = useState('');\n\n  const abortOnClick = () => {\n    if (timerId) {\n      clearInterval(timerId);\n      setProgressPercentage(0);\n      setProgressText(progressStatus.Idle);\n      onTracking(false);\n      setTimerId(undefined);\n    }\n  }\n\n  const fetchPositions = () => {\n    const { longitude, latitude, altitude } = observerInfo;\n\n    return selectedSatellites.map((sat) => {\n      const id = sat.satid;\n      return fetch(`${POSITION_API_BASE_URL}/${id}/${latitude}/${longitude}/${altitude}/${duration * 60}&apiKey=${NY20_API_KEY}`)\n        .then(response => response.json());\n    })\n  }\n\n  const updateMarker = (data, index) => {\n    setMarkersInfo(data.map((sat) => {\n      return {\n        lon: sat.positions[index].satlongitude,\n        lat: sat.positions[index].satlatitude,\n        name: sat.info.satname,\n      };\n    }))\n  }\n\n  const startTracking = (data) => {\n    let index = 59;\n    let end = data[0].positions.length - 1;\n    \n    setCurrentTimestamp(new Date(data[0].positions[index].timestamp * 1000).toString());\n    updateMarker(data, index);\n    const timerId =  setInterval(() => {\n      index += 60;\n      setProgressPercentage((index / end) * 100);\n      updateMarker(data, index);\n      setCurrentTimestamp(new Date(data[0].positions[index].timestamp * 1000).toString());\n\n      if (index >= end) {\n        setProgressText(progressStatus.Complete);\n        setTimerId(undefined);\n        onTracking(false);\n        clearInterval(timerId);\n      }\n\n    }, 1000);\n\n    return timerId;\n  }\n\n  const trackOnClick = () => {\n    setProgressText(progressStatus.Tracking);\n    setProgressPercentage(0);\n    onTracking(true);\n\n    Promise.all(fetchPositions()).then((data) => {\n      const id = startTracking(data);\n      setTimerId(id);\n    }).catch(() => {\n      // TO DO: add some fallback UI handler here\n    });\n  }\n\n  return (\n    <>\n      <div className=\"track-info-panel\">\n        <Button \n          type=\"primary\"\n          onClick={trackOnClick}\n          disabled={selectedSatellites.length === 0 || disabled}\n        >\n          Track selected satellites\n        </Button>\n        <span style={{ marginLeft: \"10px\", marginRight: \"10px\" }}>for</span>\n        <InputNumber \n          min={1}\n          max={50}\n          defaultValue={1}\n          onChange={(value) => setDuration(value)}\n          disabled={disabled}\n        />\n        <span style={{ marginLeft: \"10px\", marginRight: \"30px\" }}>minutes</span>\n        <Progress \n          style={{ width: \"500px\", marginRight: \"150px\" }}\n          percent={progressPercentage} \n          format={() => progressText} \n        />\n        {timerId &&\n          <Button \n            type=\"primary\"\n            onClick={abortOnClick}\n          >\n            Abort\n          </Button>\n        }\n      </div>\n      <div className=\"time-stamp-container\" style={{textAlign: \"center\"}}>\n        <b>{currentTimestamp}</b>\n      </div>\n      <ComposableMap projectionConfig={{ scale: 137 }} style={{ height: \"700px\", marginLeft: \"100px\" }}>\n        <Graticule stroke=\"#DDD\" strokeWidth={0.5} />\n        <Sphere stroke=\"#DDD\" strokeWidth={0.5} />\n        <Geographies geography={geoUrl}>\n          {({ geographies }) =>\n            geographies.map(geo => (\n              <Geography\n                key={geo.rsmKey}\n                geography={geo}\n                fill=\"#70bd69\"\n                stroke=\"#FFF\"\n              />\n            ))\n          }\n        </Geographies>\n        {\n          markersInfo.map((mark) => \n            <Marker coordinates={[mark.lon, mark.lat]}>\n              <circle r={4} fill=\"#F53\" />\n              <text>{mark.name}</text>\n            </Marker>\n          )\n        }\n      </ComposableMap>\n    </>\n  )\n}\n\nexport default WorldMap;\n","export const NY20_BASE_URL = \"https://www.n2yo.com/rest/v1/satellite\";\n\nexport const NY20_API_KEY = \"6U88HX-ZFMCCF-2YD4DT-4K16\";\n\nexport const SAT_CATEGORY = \"52\";\n","import React, { useState } from \"react\";\nimport { Col, Row } from \"antd\";\nimport ObserverInfo from \"./ObserverInfo\";\nimport { SAT_CATEGORY, NY20_API_KEY, NY20_BASE_URL } from \"../constants\";\nimport SatelliteList from \"./SatelliteList\";\nimport WorldMap from \"./WorldMap\";\n\nexport const ABOVE_API_BASE_URL = `${NY20_BASE_URL}/above`;\n\nconst Main = () => {\n  const [loading, setLoading] = useState(false);\n  const [satList, setSatList] = useState([]);\n  const [trakcing, setTracking] = useState(false);\n  const [observerInfo, setObserverInfo] = useState({});\n\n  const findSatellitesOnClick = (nextObserverInfo) => {\n    setObserverInfo(nextObserverInfo);\n    const { longitude, latitude, altitude, radius } = nextObserverInfo;\n\n    setLoading(true);\n    fetch(`${ABOVE_API_BASE_URL}/${latitude}/${longitude}/${altitude}/${radius}/${SAT_CATEGORY}&apiKey=${NY20_API_KEY}`)\n      .then(response => response.json())\n      .then(data => {\n        setSatList(data.above.map((satellite) => {\n          return {\n            ...satellite,\n            selected: false,\n          }\n        }));\n        setLoading(false);\n      })\n      .catch(() => {\n        setLoading(false);\n      });\n  }\n\n  return (\n    <Row>\n      <Col span={8}>\n        <ObserverInfo \n          findSatellitesOnClick={findSatellitesOnClick}\n          loading={loading}\n          disabled={trakcing}\n        />\n        <SatelliteList \n          satList={satList}\n          updateSatelliteList={setSatList}\n          loading={loading}\n          disabled={trakcing}\n        />\n      </Col>\n      <Col span={16}>\n        <WorldMap \n          selectedSatellites={satList.filter(sat => sat.selected)}\n          onTracking={setTracking}\n          disabled={trakcing}\n          observerInfo={observerInfo}\n        />\n      </Col>\n    </Row>\n  )\n}\n\nexport default Main;\n","import React from 'react';\nimport starlinkLogo from './images/starlink_logo.svg';\nimport { Layout } from 'antd';\nimport Main from './components/Main';\n\nconst { Header, Footer, Content } = Layout;\n\nfunction App() {\n  return (\n    <Layout>\n      <Header>\n        <img src={starlinkLogo} className=\"App-logo\" alt=\"logo\" />\n        <p className=\"title\">\n          StarLink Tracker\n        </p>\n      </Header>\n      <Content>\n        <Main />\n      </Content>\n      <Footer>\n        (c)2020 StarLink Tracker. All Rights Reserved. Website Made by YING GONG\n      </Footer>\n    </Layout>\n  );\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}